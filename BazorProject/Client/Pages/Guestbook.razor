@page "/guestbook"
@using BazorProject.Shared
@using BazorProject.Shared.Paging
@using BazorProject.Client.Features
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h1 id="topOfPage" hidden>Top Of Page</h1>
<h3>Gästebuch</h3>
<br />

@if (pagingResponse == null)
{
    <p><em>No entries</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="5" SelectedPage="SelectedPage" />
        </div>
    </div>
    <hr />
    <br />
    @foreach (var entry in pagingResponse.Items)
    {
        <div>
            @entry.Name schrieb am @entry.Date.ToString("D") um @entry.Date.ToString("t"):
            <br>
            <div style="font-size:20px;font-weight:bold">@entry.Message</div>
            @if (@entry.Image != null)
            {
                <br>
                <div><img class="img-fluid" src="data:image;base64,@System.Convert.ToBase64String(@entry.Image)" /></div>
            }
        </div>
        <br>
        <hr>
    }
    <br>
    <div class="row">
        <div class="col">
            <Pagination MetaData="MetaData" Spread="5" SelectedPage="SelectedPage" />
        </div>
    </div>
}

@code {
    private PagingResponse<GuestbookEntry> pagingResponse;
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters parameters = new PagingParameters();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"Guestbook?pageNumber=1&pageSize=5");
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        pagingResponse = new PagingResponse<GuestbookEntry>
        {
            Items = JsonSerializer.Deserialize<List<GuestbookEntry>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }),
            MetaData = JsonSerializer.Deserialize<MetaData>(response.Headers.GetValues("X-Pagination").First(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true })
        };

        MetaData = pagingResponse.MetaData;
    }

    public async Task GetGuestbookEntries(PagingParameters parameters)
    {

        var response = await Http.GetAsync($"Guestbook?pageNumber={parameters.PageNumber}&pageSize={parameters.PageSize}");
        var content = await response.Content.ReadAsStringAsync();
        if (!response.IsSuccessStatusCode)
        {
            throw new ApplicationException(content);
        }

        pagingResponse = new PagingResponse<GuestbookEntry>
        {
            Items = JsonSerializer.Deserialize<List<GuestbookEntry>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }),
            MetaData = JsonSerializer.Deserialize<MetaData>(response.Headers.GetValues("X-Pagination").First(), new JsonSerializerOptions { PropertyNameCaseInsensitive = true })
        };

        MetaData = pagingResponse.MetaData;
    }

    private async Task SelectedPage(int page)
    {
        parameters.PageNumber = page;
        await GetGuestbookEntries(parameters);
        await jsRuntime.InvokeVoidAsync("scrollTop");
    }
}
