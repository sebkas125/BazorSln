@page "/createguestbookentry"
@using System.IO
@using BazorProject.Shared
@using System.Text.Json;
@inject HttpClient Http
@inject IJSRuntime jsRuntime

<h1>Neuer Eintrag</h1>

<label>
    Dein Name:
    <br>
    <input id="name" @bind="name" />
</label>
<br>
<label>
    Schreibe eine Nachricht:
    <br>
    <textarea id="message" cols="24" rows="4" maxlength="250" @bind="message" />
</label>
<br>
<label>
    Lade ein Bild hoch (20 MB max):
    <br>
    <InputFile id="filePicker" OnChange="@loadFile" />
</label>
<br>
<button id="hinzufuegenButton" @onclick="createEntry">Hinzufügen</button>
<br>
<div class="isa_info" hidden="@waitHidden">
    <i class="infospin"></i>
    Eintrag wird angelegt. Bitte warten...
</div>
<div class="isa_success animated fadeOut" hidden="@successHidden">
    <i class="fa fa-check"></i>
    Eintrag erfolgreich angelegt!
</div>
<div class="isa_error" hidden="@failureHidden">
    <i class="fa fa-times-circle"></i>
    @failureMessage
</div>
<br />
<div class="isa_info animated fadeOut" hidden="@pictureInfoHidden">
    <i class="fa fa-info-circle"></i>
    Das Foto wird möglicherweise verzögert im Gästebuch angezeigt.
</div>

@code {
    IBrowserFile selectedFile;

    private async Task loadFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.GetMultipleFiles().FirstOrDefault();
        successHidden = true;
        failureHidden = true;
        this.StateHasChanged();
    }

    private string name = "";
    private string message = "";
    private bool waitHidden { get; set; } = true;
    private bool successHidden { get; set; } = true;
    private bool failureHidden { get; set; } = true;
    private bool pictureInfoHidden { get; set; } = true;
    private string failureMessage { get; set; } = "";

    private async Task createEntry()
    {
        booleanHandler(true, true, false, true);
        disablePage(true);
        this.StateHasChanged();
        try
        {
            if (string.IsNullOrEmpty(name) || string.IsNullOrEmpty(message))
            {
                booleanHandler(true, false, true, true);
                failureMessage = "Name und Nachricht müssen gesetzt sein!";
                return;
            }

            long maxFileSize = 1024 * 1024 * 20;
            var uploadFile = false;

            using var content = new MultipartFormDataContent();

            if (selectedFile != null && selectedFile.Size < maxFileSize)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxFileSize));

                content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: selectedFile.Name);

                uploadFile = true;
            }

            IList<UploadResult> newUploadResults = null;
            if (uploadFile)
            {
                var response = await Http.PostAsync("/Filesave", content);

                newUploadResults = await response.Content
                    .ReadFromJsonAsync<IList<UploadResult>>();
            }

            if (newUploadResults?.FirstOrDefault().ErrorCode > 0)
            {
                throw new Exception($"Upload fehlgeschlagen. Code {newUploadResults?.FirstOrDefault().ErrorCode}");
            }

            GuestbookEntry entry = new GuestbookEntry
            {
                Name = name,
                Message = message,
                Date = DateTime.Now,
                PathToFile = newUploadResults?.FirstOrDefault()?.Path
            };

            var stringContent = new StringContent(JsonSerializer.Serialize(entry), System.Text.Encoding.UTF8, "application/json");
            var response2 = await Http.PostAsync("Guestbook/Save", stringContent);
            booleanHandler(false, true, true, !uploadFile);
            cleanup();
        }
        catch (Exception e)
        {
            booleanHandler(true, false, true, true);
            failureMessage = e.Message;
        }
        finally
        {
            booleanHandler(successHidden, failureHidden, true, pictureInfoHidden);
            disablePage(false);
            this.StateHasChanged();
        }
    }

    private void booleanHandler(bool success, bool failure, bool wait, bool pictureInfo)
    {
        successHidden = success;
        failureHidden = failure;
        waitHidden = wait;
        pictureInfoHidden = pictureInfo;
    }

    private async void disablePage(bool disable)
    {
        if (disable)
        {
            await jsRuntime.InvokeVoidAsync("disable", "hinzufuegenButton");
            await jsRuntime.InvokeVoidAsync("disable", "filePicker");
            await jsRuntime.InvokeVoidAsync("disable", "message");
            await jsRuntime.InvokeVoidAsync("disable", "name");
            await jsRuntime.InvokeVoidAsync("disableNavMenu");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("enable", "hinzufuegenButton");
            await jsRuntime.InvokeVoidAsync("enable", "filePicker");
            await jsRuntime.InvokeVoidAsync("enable", "message");
            await jsRuntime.InvokeVoidAsync("enable", "name");
            await jsRuntime.InvokeVoidAsync("enableNavMenu");
        }
    }

    private void cleanup()
    {
        message = "";
        name = "";
        selectedFile = null;
    }
}